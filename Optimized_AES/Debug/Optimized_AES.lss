
Optimized_AES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800220  00800220  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003ac  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ec  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001aa  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c7  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 32       	cpi	r26, 0x20	; 32
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 e2       	ldi	r26, 0x20	; 32
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 32       	cpi	r26, 0x22	; 34
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8a:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <subBytes>:
#define Nr 10

/* *********************************************************** */
// SubBytes Step
/* *********************************************************** */
static void subBytes(void) {
  92:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__data_end>
  96:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <__data_end+0x1>
	uint8_t i,j;
	for (i = 0; i < 4; ++i) {
		for(j=0; j < 4; ++j){
			(*state_k)[j][i]= S[(*state_k)[j][i]];
  9a:	94 e0       	ldi	r25, 0x04	; 4
#define Nr 10

/* *********************************************************** */
// SubBytes Step
/* *********************************************************** */
static void subBytes(void) {
  9c:	d9 01       	movw	r26, r18
  9e:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t i,j;
	for (i = 0; i < 4; ++i) {
		for(j=0; j < 4; ++j){
			(*state_k)[j][i]= S[(*state_k)[j][i]];
  a0:	ec 91       	ld	r30, X
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	e0 5f       	subi	r30, 0xF0	; 240
  a6:	fe 4f       	sbci	r31, 0xFE	; 254
  a8:	40 81       	ld	r20, Z
  aa:	4c 93       	st	X, r20
// SubBytes Step
/* *********************************************************** */
static void subBytes(void) {
	uint8_t i,j;
	for (i = 0; i < 4; ++i) {
		for(j=0; j < 4; ++j){
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	14 96       	adiw	r26, 0x04	; 4
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	b1 f7       	brne	.-20     	; 0xa0 <subBytes+0xe>
  b4:	91 50       	subi	r25, 0x01	; 1
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
/* *********************************************************** */
// SubBytes Step
/* *********************************************************** */
static void subBytes(void) {
	uint8_t i,j;
	for (i = 0; i < 4; ++i) {
  ba:	91 11       	cpse	r25, r1
  bc:	ef cf       	rjmp	.-34     	; 0x9c <subBytes+0xa>
  be:	08 95       	ret

000000c0 <shiftRows>:
// ShiftRows Step
/* *********************************************************** */
static void shiftRows(void){
	uint8_t temp;

	temp =	(*state_k)[0][1];
  c0:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
  c4:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <__data_end+0x1>
  c8:	81 81       	ldd	r24, Z+1	; 0x01
	(*state_k)[0][1] = (*state_k)[1][1];
  ca:	95 81       	ldd	r25, Z+5	; 0x05
  cc:	91 83       	std	Z+1, r25	; 0x01
	(*state_k)[1][1] = (*state_k)[2][1];
  ce:	91 85       	ldd	r25, Z+9	; 0x09
  d0:	95 83       	std	Z+5, r25	; 0x05
	(*state_k)[2][1] = (*state_k)[3][1];
  d2:	95 85       	ldd	r25, Z+13	; 0x0d
  d4:	91 87       	std	Z+9, r25	; 0x09
	(*state_k)[3][1] = temp;
  d6:	85 87       	std	Z+13, r24	; 0x0d

	temp = (*state_k)[0][2];
  d8:	82 81       	ldd	r24, Z+2	; 0x02
	(*state_k)[0][2] = (*state_k)[2][2];
  da:	92 85       	ldd	r25, Z+10	; 0x0a
  dc:	92 83       	std	Z+2, r25	; 0x02
	(*state_k)[2][2] = temp;
  de:	82 87       	std	Z+10, r24	; 0x0a

	temp = (*state_k)[1][2];
  e0:	86 81       	ldd	r24, Z+6	; 0x06
	(*state_k)[1][2] = (*state_k)[3][2];
  e2:	96 85       	ldd	r25, Z+14	; 0x0e
  e4:	96 83       	std	Z+6, r25	; 0x06
	(*state_k)[3][2] = temp;
  e6:	86 87       	std	Z+14, r24	; 0x0e

	temp = (*state_k)[0][3];
  e8:	83 81       	ldd	r24, Z+3	; 0x03
	(*state_k)[0][3] = (*state_k)[3][3];
  ea:	97 85       	ldd	r25, Z+15	; 0x0f
  ec:	93 83       	std	Z+3, r25	; 0x03
	(*state_k)[3][3] = (*state_k)[2][3];
  ee:	93 85       	ldd	r25, Z+11	; 0x0b
  f0:	97 87       	std	Z+15, r25	; 0x0f
	(*state_k)[2][3] = (*state_k)[1][3];
  f2:	97 81       	ldd	r25, Z+7	; 0x07
  f4:	93 87       	std	Z+11, r25	; 0x0b
	(*state_k)[1][3] = temp;
  f6:	87 83       	std	Z+7, r24	; 0x07
  f8:	08 95       	ret

000000fa <addRoundKey>:

/* *********************************************************** */
// AddRoundKey Step
/* *********************************************************** */

static void addRoundKey(int round){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <__data_end>
 102:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <__data_end+0x1>
 106:	ec 01       	movw	r28, r24
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	cc 0f       	add	r28, r28
 10c:	dd 1f       	adc	r29, r29
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <addRoundKey+0x10>
	uint8_t i,j;
	for(i = 0; i < 4; ++i)
	{
		for(j = 0; j < 4; ++j)
		{
			(*state_k)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	fa 01       	movw	r30, r20
 118:	ec 0f       	add	r30, r28
 11a:	fd 1f       	adc	r31, r29
 11c:	e0 5a       	subi	r30, 0xA0	; 160
 11e:	ff 4f       	sbci	r31, 0xFF	; 255

/* *********************************************************** */
// AddRoundKey Step
/* *********************************************************** */

static void addRoundKey(int round){
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	db 01       	movw	r26, r22
 126:	a2 0f       	add	r26, r18
 128:	b3 1f       	adc	r27, r19
	uint8_t i,j;
	for(i = 0; i < 4; ++i)
	{
		for(j = 0; j < 4; ++j)
		{
			(*state_k)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 12a:	91 91       	ld	r25, Z+
 12c:	8c 91       	ld	r24, X
 12e:	98 27       	eor	r25, r24
 130:	9c 93       	st	X, r25
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255

static void addRoundKey(int round){
	uint8_t i,j;
	for(i = 0; i < 4; ++i)
	{
		for(j = 0; j < 4; ++j)
 136:	24 30       	cpi	r18, 0x04	; 4
 138:	31 05       	cpc	r19, r1
 13a:	a1 f7       	brne	.-24     	; 0x124 <addRoundKey+0x2a>
 13c:	4c 5f       	subi	r20, 0xFC	; 252
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	6c 5f       	subi	r22, 0xFC	; 252
 142:	7f 4f       	sbci	r23, 0xFF	; 255
// AddRoundKey Step
/* *********************************************************** */

static void addRoundKey(int round){
	uint8_t i,j;
	for(i = 0; i < 4; ++i)
 144:	40 31       	cpi	r20, 0x10	; 16
 146:	51 05       	cpc	r21, r1
 148:	31 f7       	brne	.-52     	; 0x116 <addRoundKey+0x1c>
		for(j = 0; j < 4; ++j)
		{
			(*state_k)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
		}
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <main>:

/* *********************************************************** */
// Main Functions
/* *********************************************************** */

int main(void){
 150:	6f 92       	push	r6
 152:	7f 92       	push	r7
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	a0 97       	sbiw	r28, 0x20	; 32
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61

	uint8_t plainText[] = {0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6};
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	e0 e1       	ldi	r30, 0x10	; 16
 17e:	f2 e0       	ldi	r31, 0x02	; 2
 180:	de 01       	movw	r26, r28
 182:	51 96       	adiw	r26, 0x11	; 17
 184:	01 90       	ld	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	8a 95       	dec	r24
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x34>
 18c:	7e 01       	movw	r14, r28
 18e:	81 e1       	ldi	r24, 0x11	; 17
 190:	e8 0e       	add	r14, r24
 192:	f1 1c       	adc	r15, r1
 194:	8e 01       	movw	r16, r28
 196:	0f 5f       	subi	r16, 0xFF	; 255
 198:	1f 4f       	sbci	r17, 0xFF	; 255
 19a:	d8 01       	movw	r26, r16
 19c:	f7 01       	movw	r30, r14
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	8e 0d       	add	r24, r14
	//uint8_t cipherText[]= {0x03,0x36,0x76,0x3e,0x96,0x6d,0x92,0x59,0x5a,0x56,0x7c,0xc9,0xce,0x53,0x7f,0x5e};
	uint8_t buffer[16];

	for (uint8_t i=0;i<16;++i)
	{
		buffer[i] = plainText[i];
 1a2:	91 91       	ld	r25, Z+
 1a4:	9d 93       	st	X+, r25

	uint8_t plainText[] = {0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6};
	//uint8_t cipherText[]= {0x03,0x36,0x76,0x3e,0x96,0x6d,0x92,0x59,0x5a,0x56,0x7c,0xc9,0xce,0x53,0x7f,0x5e};
	uint8_t buffer[16];

	for (uint8_t i=0;i<16;++i)
 1a6:	8e 13       	cpse	r24, r30
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <main+0x52>
	{
		buffer[i] = plainText[i];
	}

	state_k = (state*)buffer;
 1aa:	10 93 21 02 	sts	0x0221, r17	; 0x800221 <__data_end+0x1>
 1ae:	00 93 20 02 	sts	0x0220, r16	; 0x800220 <__data_end>
/* *********************************************************** */
// Encryption
/* *********************************************************** */
static void Encrypt(){
	uint8_t round = 0;
	addRoundKey(0);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 7d 00 	call	0xfa	; 0xfa <addRoundKey>
 1ba:	cc 24       	eor	r12, r12
 1bc:	c3 94       	inc	r12
 1be:	d1 2c       	mov	r13, r1
// MixColumns Step
/* *********************************************************** */

static uint8_t xtime(uint8_t x)
{
	return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 1c0:	9b e1       	ldi	r25, 0x1B	; 27
 1c2:	b9 2e       	mov	r11, r25
static void Encrypt(){
	uint8_t round = 0;
	addRoundKey(0);

	for(round = 1; round < Nr; ++round){
		subBytes();
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <subBytes>
		shiftRows();
 1c8:	0e 94 60 00 	call	0xc0	; 0xc0 <shiftRows>
 1cc:	be 01       	movw	r22, r28
 1ce:	6e 5f       	subi	r22, 0xFE	; 254
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	de 01       	movw	r26, r28
 1d4:	13 96       	adiw	r26, 0x03	; 3
 1d6:	fe 01       	movw	r30, r28
 1d8:	34 96       	adiw	r30, 0x04	; 4
 1da:	3f 01       	movw	r6, r30
 1dc:	a8 01       	movw	r20, r16

static void mixColumns(void){
	uint8_t i, u, v, t;
	for(i = 0; i < 4; ++i)
	{
		t = (*state_k)[i][0] ^ (*state_k)[i][1] ^ (*state_k)[i][2] ^ (*state_k)[i][3] ;
 1de:	fa 01       	movw	r30, r20
 1e0:	90 81       	ld	r25, Z
 1e2:	fb 01       	movw	r30, r22
 1e4:	a0 80       	ld	r10, Z
 1e6:	a9 26       	eor	r10, r25
 1e8:	f3 01       	movw	r30, r6
 1ea:	20 81       	ld	r18, Z
 1ec:	8c 91       	ld	r24, X
 1ee:	28 27       	eor	r18, r24
 1f0:	2a 25       	eor	r18, r10
 1f2:	92 2e       	mov	r9, r18
 1f4:	99 26       	eor	r9, r25
// MixColumns Step
/* *********************************************************** */

static uint8_t xtime(uint8_t x)
{
	return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 1f6:	3a 2d       	mov	r19, r10
 1f8:	33 1f       	adc	r19, r19
 1fa:	33 27       	eor	r19, r19
 1fc:	33 1f       	adc	r19, r19
 1fe:	3b 9d       	mul	r19, r11
 200:	30 2d       	mov	r19, r0
 202:	11 24       	eor	r1, r1
 204:	8a 2d       	mov	r24, r10
 206:	88 0f       	add	r24, r24
 208:	83 27       	eor	r24, r19
	uint8_t i, u, v, t;
	for(i = 0; i < 4; ++i)
	{
		t = (*state_k)[i][0] ^ (*state_k)[i][1] ^ (*state_k)[i][2] ^ (*state_k)[i][3] ;
		u = (*state_k)[i][0];
		v  = (*state_k)[i][0] ^ (*state_k)[i][1] ; v = xtime(v);  (*state_k)[i][0] ^= v ^ t ;
 20a:	89 25       	eor	r24, r9
 20c:	fa 01       	movw	r30, r20
 20e:	80 83       	st	Z, r24
		v  = (*state_k)[i][1] ^ (*state_k)[i][2] ; v = xtime(v);  (*state_k)[i][1] ^= v ^ t ;
 210:	fb 01       	movw	r30, r22
 212:	80 81       	ld	r24, Z
 214:	ac 90       	ld	r10, X
 216:	a8 26       	eor	r10, r24
 218:	92 2e       	mov	r9, r18
 21a:	98 26       	eor	r9, r24
// MixColumns Step
/* *********************************************************** */

static uint8_t xtime(uint8_t x)
{
	return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 21c:	3a 2d       	mov	r19, r10
 21e:	33 1f       	adc	r19, r19
 220:	33 27       	eor	r19, r19
 222:	33 1f       	adc	r19, r19
 224:	3b 9d       	mul	r19, r11
 226:	30 2d       	mov	r19, r0
 228:	11 24       	eor	r1, r1
 22a:	8a 2d       	mov	r24, r10
 22c:	88 0f       	add	r24, r24
 22e:	83 27       	eor	r24, r19
	for(i = 0; i < 4; ++i)
	{
		t = (*state_k)[i][0] ^ (*state_k)[i][1] ^ (*state_k)[i][2] ^ (*state_k)[i][3] ;
		u = (*state_k)[i][0];
		v  = (*state_k)[i][0] ^ (*state_k)[i][1] ; v = xtime(v);  (*state_k)[i][0] ^= v ^ t ;
		v  = (*state_k)[i][1] ^ (*state_k)[i][2] ; v = xtime(v);  (*state_k)[i][1] ^= v ^ t ;
 230:	89 25       	eor	r24, r9
 232:	80 83       	st	Z, r24
		v  = (*state_k)[i][2] ^ (*state_k)[i][3] ; v = xtime(v);  (*state_k)[i][2] ^= v ^ t ;
 234:	8c 91       	ld	r24, X
 236:	f3 01       	movw	r30, r6
 238:	a0 80       	ld	r10, Z
 23a:	a8 26       	eor	r10, r24
 23c:	92 2e       	mov	r9, r18
 23e:	98 26       	eor	r9, r24
// MixColumns Step
/* *********************************************************** */

static uint8_t xtime(uint8_t x)
{
	return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 240:	3a 2d       	mov	r19, r10
 242:	33 1f       	adc	r19, r19
 244:	33 27       	eor	r19, r19
 246:	33 1f       	adc	r19, r19
 248:	3b 9d       	mul	r19, r11
 24a:	30 2d       	mov	r19, r0
 24c:	11 24       	eor	r1, r1
 24e:	8a 2d       	mov	r24, r10
 250:	88 0f       	add	r24, r24
 252:	83 27       	eor	r24, r19
	{
		t = (*state_k)[i][0] ^ (*state_k)[i][1] ^ (*state_k)[i][2] ^ (*state_k)[i][3] ;
		u = (*state_k)[i][0];
		v  = (*state_k)[i][0] ^ (*state_k)[i][1] ; v = xtime(v);  (*state_k)[i][0] ^= v ^ t ;
		v  = (*state_k)[i][1] ^ (*state_k)[i][2] ; v = xtime(v);  (*state_k)[i][1] ^= v ^ t ;
		v  = (*state_k)[i][2] ^ (*state_k)[i][3] ; v = xtime(v);  (*state_k)[i][2] ^= v ^ t ;
 254:	89 25       	eor	r24, r9
 256:	8c 93       	st	X, r24
		v  = (*state_k)[i][3] ^ u ;        		   v = xtime(v);  (*state_k)[i][3] ^= v ^ t ;
 258:	80 81       	ld	r24, Z
 25a:	98 27       	eor	r25, r24
 25c:	28 27       	eor	r18, r24
// MixColumns Step
/* *********************************************************** */

static uint8_t xtime(uint8_t x)
{
	return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 25e:	89 2f       	mov	r24, r25
 260:	88 1f       	adc	r24, r24
 262:	88 27       	eor	r24, r24
 264:	88 1f       	adc	r24, r24
 266:	8b 9d       	mul	r24, r11
 268:	80 2d       	mov	r24, r0
 26a:	11 24       	eor	r1, r1
 26c:	99 0f       	add	r25, r25
 26e:	98 27       	eor	r25, r24
		t = (*state_k)[i][0] ^ (*state_k)[i][1] ^ (*state_k)[i][2] ^ (*state_k)[i][3] ;
		u = (*state_k)[i][0];
		v  = (*state_k)[i][0] ^ (*state_k)[i][1] ; v = xtime(v);  (*state_k)[i][0] ^= v ^ t ;
		v  = (*state_k)[i][1] ^ (*state_k)[i][2] ; v = xtime(v);  (*state_k)[i][1] ^= v ^ t ;
		v  = (*state_k)[i][2] ^ (*state_k)[i][3] ; v = xtime(v);  (*state_k)[i][2] ^= v ^ t ;
		v  = (*state_k)[i][3] ^ u ;        		   v = xtime(v);  (*state_k)[i][3] ^= v ^ t ;
 270:	92 27       	eor	r25, r18
 272:	90 83       	st	Z, r25
 274:	4c 5f       	subi	r20, 0xFC	; 252
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	6c 5f       	subi	r22, 0xFC	; 252
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	14 96       	adiw	r26, 0x04	; 4
 27e:	f4 e0       	ldi	r31, 0x04	; 4
 280:	6f 0e       	add	r6, r31
 282:	71 1c       	adc	r7, r1
	return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
}

static void mixColumns(void){
	uint8_t i, u, v, t;
	for(i = 0; i < 4; ++i)
 284:	4e 15       	cp	r20, r14
 286:	5f 05       	cpc	r21, r15
 288:	09 f0       	breq	.+2      	; 0x28c <main+0x13c>
 28a:	a9 cf       	rjmp	.-174    	; 0x1de <main+0x8e>

	for(round = 1; round < Nr; ++round){
		subBytes();
		shiftRows();
		mixColumns();
		addRoundKey(round);
 28c:	c6 01       	movw	r24, r12
 28e:	0e 94 7d 00 	call	0xfa	; 0xfa <addRoundKey>
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	c8 1a       	sub	r12, r24
 296:	d8 0a       	sbc	r13, r24
/* *********************************************************** */
static void Encrypt(){
	uint8_t round = 0;
	addRoundKey(0);

	for(round = 1; round < Nr; ++round){
 298:	9a e0       	ldi	r25, 0x0A	; 10
 29a:	c9 16       	cp	r12, r25
 29c:	d1 04       	cpc	r13, r1
 29e:	09 f0       	breq	.+2      	; 0x2a2 <main+0x152>
 2a0:	91 cf       	rjmp	.-222    	; 0x1c4 <main+0x74>
		shiftRows();
		mixColumns();
		addRoundKey(round);
	}

	subBytes();
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <subBytes>
	shiftRows();
 2a6:	0e 94 60 00 	call	0xc0	; 0xc0 <shiftRows>
	addRoundKey(Nr);
 2aa:	8a e0       	ldi	r24, 0x0A	; 10
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 7d 00 	call	0xfa	; 0xfa <addRoundKey>

	state_k = (state*)buffer;
	Encrypt();
	for (uint8_t i=0;i<16; ++i){
		//printf("%d", buffer[i]);
		return buffer[i];
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
	}
	
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a0 96       	adiw	r28, 0x20	; 32
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	bf 90       	pop	r11
 2d4:	af 90       	pop	r10
 2d6:	9f 90       	pop	r9
 2d8:	7f 90       	pop	r7
 2da:	6f 90       	pop	r6
 2dc:	08 95       	ret

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
